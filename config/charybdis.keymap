#include <behaviors/mouse_keys.dtsi>

#include "zmk-helpers/helper.h"

#define HM_TAPPING_TERM 280
#define HM_TAPPING_TERM_FAST 175
#define HM_PRIOR_IDLE 150

#define COMBO_TERM_FAST 35
#define COMBO_TERM_SLOW 40
#define COMBO_PRIOR_IDLE 100

#define BASE 0
#define NUMS 1
#define DANGER 2
#define SCROLL 3

#include "zmk-helpers/key-labels/34.h"                                      // key-position labels
#include <behaviors.dtsi>

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define KEYS_T                 LH1 LH0 RH0 RH1                              // thumb keys

/ {
    combos {
        compatible = "zmk,combos";

        LeftClick {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mkp LCLK>;
            key-positions = <11 12>;
        };

        RightClick {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mkp RCLK>;
            key-positions = <12 13>;
        };

        MiddleClick {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mkp MCLK>;
            key-positions = <11 12 13>;
        };

        ParaLeft {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 3>;
        };

        ParaRight {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
        };

        BrakLeft {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <1 0>;
        };

        BrakRight {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
        };

        BraceLeft {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LEFT_BRACE>;
            key-positions = <1 2>;
        };

        BraceRight {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <8 7>;
        };

        CapsWord {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&caps_word>;
            key-positions = <15 16>;
        };

        escape {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp ESCAPE>;
            key-positions = <27 26>;
        };

        tab {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp TAB>;
            key-positions = <28 27>;
        };

        grave {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp GRAVE>;
            key-positions = <29 28>;
        };

        undo {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(Z)>;
            key-positions = <21 20>;
        };

        quote {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <19 18>;
        };

        copy {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(C)>;
            key-positions = <22 21>;
        };

        paste {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(V)>;
            key-positions = <23 22>;
        };

       dan_layer  {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mo 3>;
            key-positions = <33 34>;
        };

        scroll {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mo 3>;
            key-positions = <10 11>;
        };
    };

    behaviors {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
  &kp Q                 &kp W             &kp E                 &kp R               &kp T        &kp Y      &kp U               &kp I                  &kp O    &kp P
  &hm_l LEFT_CONTROL A  &hm_l LEFT_ALT S  &hm_l LEFT_COMMAND D  &hm_l LEFT_SHIFT F  &kp G        &kp H      &hm_r LEFT_SHIFT J  &hm_r RIGHT_COMMAND K  &kp L    &kp SEMI
  &kp Z                 &kp X             &kp C                 &kp V               &kp B        &kp N      &kp M               &kp COMMA              &kp DOT  &kp SLASH
                                          &mo 2                 &mo 1               &kp ENTER    &kp SPACE  &kp BACKSPACE
            >;
        };

        NUMS {
            bindings = <
  &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT       &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR          &kp RPAR
  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp MINUS  &kp EQUAL  &kp GRAVE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp N9        &kp NUMBER_0    &kp UNDER  &kp PLUS   &kp TILDE  &kp PIPE          &kp BACKSLASH
                              &trans        &trans        &trans          &trans     &trans
            >;
        };

        DANGER {
            bindings = <
  &kp F1        &kp F2        &kp F3          &kp F4        &kp F5              &kp F6    &kp F7             &kp F8           &kp F9     &bt BT_CLR
  &trans        &kp C_MUTE    &kp C_PREVIOUS  &kp C_NEXT    &kp C_PLAY_PAUSE    &kp LEFT  &kp DOWN           &kp UP           &kp RIGHT  &trans
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4        &trans    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans     &trans
                              &trans          &trans        &trans              &trans    &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
