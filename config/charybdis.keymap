#include <behaviors/mouse_keys.dtsi>

#include "zmk-helpers/helper.h"

#include "zmk-helpers/key-labels/34.h"                                      // key-position labels
#include <behaviors.dtsi>

#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define HM_TAPPING_TERM 260
#define HM_TAPPING_TERM_FAST 165
#define HM_PRIOR_IDLE 140

#define COMBO_TERM_FAST 30
#define COMBO_TERM_SLOW 35
#define COMBO_PRIOR_IDLE 75

#define BASE 0
#define NUMS 1
#define DANGER 2
#define SCROLL 3
#define SNIPE 4
#define AUTO 5

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define KEYS_T                 LH1 LH0 RH0 RH1                              // thumb keys

/ {
combos {
        compatible = "zmk,combos";

        //INFO: Mouse clicks - left hand
        combo_mouse_left_click_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mkp LCLK>;
            key-positions = <11 12>;
        };

        combo_mouse_right_click_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mkp RCLK>;
            key-positions = <12 13>;
        };

        combo_mouse_middle_click_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mkp MCLK>;
            key-positions = <11 12 13>;
        };

        //INFO: Mouse clicks - right hand
        combo_mouse_left_click_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mkp LCLK>;
            key-positions = <16 17>;
        };

        combo_mouse_right_click_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mkp RCLK>;
            key-positions = <17 18>;
        };

        combo_mouse_middle_click_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mkp MCLK>;
            key-positions = <16 17 18>;
        };

        //INFO: Layer activation
        combo_layer_scroll_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mo 3>;
            key-positions = <21 22 23>;
        };

        combo_layer_snipe_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mo 4>;
            key-positions = <20 21 22>;
        };

        combo_layer_scroll_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mo 3>;
            key-positions = <26 27 28>;
        };

        combo_layer_snipe_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mo 4>;
            key-positions = <27 28 29>;
        };

        combo_layer_auto {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mo 5>;
            key-positions = <3 4>;
        };

        combo_layer_dan {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&mo 2>;
            key-positions = <33 34>;
        };

        //INFO: Brackets and braces
        combo_paren_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 3>;
        };

        combo_paren_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
        };

        combo_bracket_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <1 0>;
        };

        combo_bracket_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
        };

        combo_brace_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LEFT_BRACE>;
            key-positions = <1 2>;
        };

        combo_brace_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8>;
        };

        //INFO: System commands
        combo_caps_word {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&caps_word>;
            key-positions = <15 16>;
        };

        combo_esc_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp ESCAPE>;
            key-positions = <0 1 2>;
        };

        combo_esc_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp ESCAPE>;
            key-positions = <26 27>;
        };

        combo_tab {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp TAB>;
            key-positions = <27 28>;
        };

        combo_grave {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp GRAVE>;
            key-positions = <28 29>;
        };

        //INFO: Edit commands
        combo_undo {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(Z)>;
            key-positions = <20 21>;
        };

        combo_redo {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LS(LG(Z))>;
            key-positions = <23 24>;
        };

        combo_copy {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(C)>;
            key-positions = <21 22>;
        };

        combo_paste {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(V)>;
            key-positions = <22 23>;
        };

        //INFO: Special characters
        combo_quote {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <19 18>;
        };

        combo_underscore {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp UNDERSCORE>;
            key-positions = <3 13>;
        };

        combo_minus {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp MINUS>;
            key-positions = <6 16>;
        };

        combo_plus {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp PLUS>;
            key-positions = <2 12>;
        };

        combo_equal {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp EQUAL>;
            key-positions = <7 17>;
        };
    };

    trackball_listener {
      compatible = "zmk,input-behavior-listener";
      device = <&vtrackball>;
      layers = <0 1 2 3 4 5>;
      evt-type = <INPUT_EV_REL>;
      x-input-code = <INPUT_REL_X>;
      y-input-code = <INPUT_REL_Y>;
      scale-multiplier = <1>;
      scale-divisor = <1>;
    };

    trackball_snipe_listener {
      compatible = "zmk,input-behavior-listener";
      device = <&vtrackball>;
      layers = <4>;
      evt-type = <INPUT_EV_REL>;
      x-input-code = <INPUT_REL_X>;
      y-input-code = <INPUT_REL_Y>;
      scale-multiplier = <1>;
      scale-divisor = <16>;
    };

    trackball_scroll_listener {
      compatible = "zmk,input-behavior-listener";
      device = <&vtrackball>;
      layers = <3>;
      evt-type = <INPUT_EV_REL>;
      x-input-code = <INPUT_REL_MISC>;
      y-input-code = <INPUT_REL_WHEEL>;
      bindings = <&ib_wheel_scaler 1 25>;
    };

    ib_wheel_scaler: ib_wheel_scaler {
      compatible = "zmk,input-behavior-scaler";
      #binding-cells = <2>;
      evt-type = <INPUT_EV_REL>;
      input-code = <INPUT_REL_WHEEL>;
    };

    behaviors {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <HM_TAPPING_TERM_FAST>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <HM_TAPPING_TERM_FAST>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            display-name = "BASE";
            bindings = <
  &kp Q                 &kp W             &kp E                 &kp R               &kp T        &kp Y      &kp U               &kp I                  &kp O                 &kp P
  &hm_l LEFT_CONTROL A  &hm_l LEFT_ALT S  &hm_l LEFT_COMMAND D  &hm_l LEFT_SHIFT F  &kp G        &kp H      &hm_r LEFT_SHIFT J  &hm_r RIGHT_COMMAND K  &hm_r RIGHT_COMMAND L &hm_r RIGHT_CONTROL SEMI
  &kp Z                 &kp X             &kp C                 &kp V               &kp B        &kp N      &kp M               &kp COMMA              &kp DOT               &kp SLASH
                                          &mo 2                 &mo 1               &kp ENTER    &kp SPACE  &kp BACKSPACE
            >;
        };

        NUMS {
            display-name = "NUMS & SYM";
            bindings = <
  &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT       &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR          &kp RPAR
  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp MINUS  &kp EQUAL  &kp GRAVE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp N9        &kp NUMBER_0    &kp UNDER  &kp PLUS   &kp TILDE  &kp PIPE          &kp BACKSLASH
                              &trans        &trans        &trans          &trans     &trans
            >;
        };

        DANGER {
            display-name = "DANGER";
            bindings = <
  &kp F1        &kp F2        &kp F3          &kp F4        &kp F5              &kp F6    &kp F7             &kp F8           &kp F9     &bt BT_CLR
  &trans        &kp C_MUTE    &kp C_PREVIOUS  &kp C_NEXT    &kp C_PLAY_PAUSE    &kp LEFT  &kp DOWN           &kp UP           &kp RIGHT  &trans
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4        &trans    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans     &trans
                              &trans          &trans        &trans              &trans    &trans
            >;
        };

        SCROLL {
            display-name = "SCROLL";
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans
                &trans    &trans    &trans    &trans  &trans
            >;
        };

        SNIPE {
            display-name = "SNIPE";
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans
                &trans    &trans    &trans    &trans  &trans
            >;
        };

        AUTO {
            display-name = "AUTO";
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans
                &trans    &trans    &trans    &trans  &trans
            >;
        };
    };
};
